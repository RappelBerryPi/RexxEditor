[
    {
        "pattern": "ABBREV(Information,Info)",
        "returnValue": {
            "type": "Boolean",
            "description": "Returns 1 if <span>Info</span> is equal to the leading characters of <span>Information</span> and 0 otherwise."
        },
        "variables": [
            {
                "type": "String",
                "defaultValue": "Information",
                "offsets": [
                    7
                ],
                "variableDescription": "The complete string to see if <span>Info</span> is an abbreviation of."
            },
            {
                "type": "String",
                "defaultValue": "Info",
                "offsets": [
                    19
                ],
                "variableDescription": "The string to see if it is an abbreviation of <span>Information</span>."
            }
        ],
        "examples": [
            "ABBREV('Print','Pri') == 1",
            "ABBREV('PRINT','Pri') == 0",
            "ABBREV('PRINT','PRY') == 0",
            "ABBREV('PRINT','')    == 1"
        ],
        "additionalInfo": "Is abbreviation of."
    },
    {
        "pattern": "ABBREV(Information,Info,Length)",
        "returnValue": {
            "type": "Boolean",
            "description": "As with <span>ABBREV(Information,Info)</span>. A Null string will always match if length is 0."
        },
        "variables": [
            {
                "type": "String",
                "defaultValue": "Information",
                "offsets": [
                    7
                ],
                "variableDescription": "The complete string to see if <span>Info</span> is an abbreviation of."
            },
            {
                "type": "String",
                "defaultValue": "Info",
                "offsets": [
                    19
                ],
                "variableDescription": "The string to see if it is an abbreviation of <span>Information</span>."
            },
            {
                "type": "Integer",
                "defaultValue": "0",
                "offsets": [
                    24
                ],
                "variableDescription": "The minimum length that <span>Info</span> must be."
            }
        ],
        "examples": [
            "ABBREV('PRINT','PRI',4) == 0",
            "ABBREV('PRINT','',1)    == 0"
        ],
        "additionalInfo": "Is abbreviation of."
    },
    {
        "pattern": "ABS(Number)",
        "returnValue": {
            "type": "Numeric",
            "description": "The absolute value of <span>Number</span>. This has no sign and is formatted according to the current NUMERIC settings."
        },
        "variables": [
            {
                "type": "Numeric",
                "defaultValue": "Number",
                "offsets": [
                    4
                ],
                "variableDescription": "The number to get the absolute value of."
            }
        ],
        "examples": [
            "ABS('12.3')    == 12.3",
            "ABS(' -0.307') == 0.307"
        ],
        "additionalInfo": "Function"
    },
    {
        "pattern": "ADDRESS()",
        "returnValue": {
            "type": "String",
            "description": "The name of the environment to which commands are currently being submitted. See the <span>ADDRESS</span> instruction for more information."
        },
        "examples": [
            "ADDRESS() == 'PCDOS'   /* perhaps */",
            "ADDRESS() == 'XEDIT'   /* perhaps */",
            "ADDRESS() == 'ISPEXEC' /* perhaps */",
            "ADDRESS() == 'TSO'     /* perhaps */"
        ],
        "additionalInfo": "Absolute value of"
    },
    {
        "pattern": "ARG()",
        "returnValue": {
            "type": "Numeric",
            "description": "The number of arguments passed into the program or internal routine."
        },
        "examples": [
            "ARG() == 0 /* with no arguments passed I.E. (Call Function)      */",
            "ARG() == 3 /* with 3 arguments passed  I.E. (Call Function 1,,2) */"
        ],
        "additionalInfo": "The number of arguments."
    },
    {
        "pattern": "ARG(N)",
        "returnValue": {
            "type": "String",
            "description": "The String value of the Argument <span>N</span> (starting from 1). This returns the Null String if the argument does not exist or if it is greater than the number of arguments passed to the program or internal routine. See <span>ARG()</span>. See also <span>PARSE ARG</span>."
        },
        "variables": [
            {
                "type": "Integer",
                "defaultValue": "N",
                "offsets": [
                    4
                ],
                "variableDescription": "The argument index to retrieve (starting from 1)."
            }
        ],
        "examples": [
            "ARG(1) == 1  /* Call Function 1,,2 */",
            "ARG(2) == '' /* Call Function 1,,2 */",
            "ARG(3) == 2  /* Call Function 1,,2 */",
            "ARG(n) == '' /*(for n >=4) Call Function 1,,2 */"
        ],
        "additionalInfo": ""
    },
    {
        "pattern": "ARG(N,Option)",
        "returnValue": {
            "type": "Boolean",
            "description": "Depending on <span>Option</span> tests whether the argument <span>N</span> <span>e</span>xists or was <span>o</span>mitted."
        },
        "variables": [
            {
                "type": "Integer",
                "defaultValue": "N",
                "offsets": [
                    4
                ],
                "variableDescription": "The argument index to retrieve (starting from 1)."
            },
            {
                "type": "Char",
                "defaultValue": "Option",
                "offsets": [
                    6
                ],
                "variableDescription": "The value 'E' to test if the argument exists or 'O' to test if the argument was omitted."
            }
        ],
        "examples": [
            "ARG(1,'e') == 1  /* Call Function 1,,2 */",
            "ARG(2,'E') == 0  /* Call Function 1,,2 */",
            "ARG(2,'o') == 1  /* Call Function 1,,2 */",
            "ARG(3,'O') == 0  /* Call Function 1,,2 */"
        ],
        "additionalInfo": ""
    },
    {
        "pattern": "BITAND(String1)",
        "returnValue": {
            "type": "String",
            "description": "Returns the String passed into the function unmodified."
        },
        "variables": [
            {
                "type": "String",
                "defaultValue": "String1",
                "offsets": [
                    7
                ],
                "variableDescription": "The String to return from the function."
            }
        ],
        "examples": [
            "BITAND('73'x) == '73'x"
        ],
        "additionalInfo": ""
    },
    {
        "pattern": "BITAND(String1,String2)",
        "returnValue": {
            "type": "String",
            "description": "Returns the String that is a result of binary ANDing String1 and String2 together. The AND starts at the far left and continues until the shorter of the two strings is exausted the length of the returned string is that of the longest passed in String."
        },
        "variables": [
            {
                "type": "String",
                "defaultValue": "String1",
                "offsets": [
                    7
                ],
                "variableDescription": "The String to AND with String2."
            },
            {
                "type": "String",
                "defaultValue": "String2",
                "offsets": [
                    15
                ],
                "variableDescription": "The String to AND with String1."
            }
        ],
        "examples": [
            "BITAND('73'x,'27'x)   == '23'x",
            "BITAND('13'x,'5555'x) == '1155'x"
        ],
        "additionalInfo": ""
    },
    {
        "pattern": "BITAND(String1,String2,Pad)",
        "returnValue": {
            "type": "String",
            "description": "Returns the String that is a result of binary ANDing String1 and String2 together with PAD applied to the shorter string until it equals the length of the longer String. The AND starts at the far left and continues until the shorter of the two strings is exausted the length of the returned string is that of the longest passed in String."
        },
        "variables": [
            {
                "type": "String",
                "defaultValue": "String1",
                "offsets": [
                    7
                ],
                "variableDescription": "The String to AND with String2."
            },
            {
                "type": "String",
                "defaultValue": "String2",
                "offsets": [
                    15
                ],
                "variableDescription": "The String to AND with String1."
            },
            {
                "type": "String",
                "defaultValue": "Pad",
                "offsets": [
                    23
                ],
                "variableDescription": "The Padding to be aplied to the shorter string before the AND is perfromed."
            }
        ],
        "examples": [
            "BITAND('13'x,'5555'x,'74'x) == '1154'x"
        ],
        "additionalInfo": ""
    },
    {
        "pattern": "POS(Needle,Haystack)",
        "returnValue": {
            "type": "Integer",
            "description": "Returns the position of one string, <span>Needle</span>, in another, <span>Haystack</span>. (See also the <span>LASTPOS</span> function.) If the string <span>Needle</span> is not found, or is the nulll string, 0 is returned. By Default the search starts at the first character of haystack (this is, <span>start</span> has the value of 1). This may be overridden by specifying <span>start</span> (which must be positive), the point at which to start the search. See <span>POS(Needle,Haystack,Start)</span> for more information."
        },
        "variables": [
            {
                "type": "String",
                "defaultValue": "Needle",
                "offsets": [
                    4
                ],
                "variableDescription": "The string to search for."
            },
            {
                "type": "String",
                "defaultValue": "Haystack",
                "offsets": [
                    11
                ],
                "variableDescription": "The string to search through."
            }
        ],
        "examples": [
            "Pos(\"A\",\"ABCDEFG\") ===> 1",
            "Pos(\"Doe\",\"John Doe\") ===> 6",
            "Pos(\"No\",\"Yes\") ===> 0"
        ],
        "additionalInfo": "Position of."
    },
    {
        "pattern": "POS(Needle,Haystack,Start)",
        "returnValue": {
            "type": "Integer",
            "description": "As with <span>POS(Needle,Haystack)</span> this overload searches through <span>Haystack</span> for <span>Needle</span> starting at the specified <span>Start</span> Position. <span>Start</span> must be positive."
        },
        "variables": [
            {
                "type": "String",
                "defaultValue": "Needle",
                "offsets": [
                    4
                ],
                "variableDescription": "The string to search for."
            },
            {
                "type": "String",
                "defaultValue": "Haystack",
                "offsets": [
                    11
                ],
                "variableDescription": "The string to search through."
            },
            {
                "type": "String",
                "defaultValue": "Start",
                "offsets": [
                    20
                ],
                "variableDescription": "The string to search through."
            }
        ],
        "examples": [
            "Pos(\"A\",\"ABCDEFG\") ===> 1",
            "Pos(\"Doe\",\"John Doe\") ===> 6",
            "Pos(\"No\",\"Yes\") ===> 0"
        ],
        "additionalInfo": "Position of starting at."
    },
    {
        "pattern": "FUNCTION_NAME()",
        "returnValue": {
            "type": "",
            "description": ""
        },
        "variables": [
            {
                "type": "",
                "defaultValue": "",
                "offsets": [
                    0
                ],
                "variableDescription": ""
            }
        ],
        "examples": [
            ""
        ],
        "additionalInfo": ""
    }
]